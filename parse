package com;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

public class XSDParse {
    
    public static final String PATH = "/tmp/resources";

    public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
        SAXParserFactory spf = SAXParserFactory.newInstance();
        SAXParser sp = spf.newSAXParser();
        XMLReader reader = sp.getXMLReader();
        reader.setContentHandler((ContentHandler) new SchemaSaxHandler());
        reader.parse(new InputSource(new FileInputStream(new File(PATH, "source.xsd"))));
    }
}

class SchemaElement {
    
    private String name;
    private String type;
    private List<SchemaElement> children;
    private Map<String, String> attributes;
	public Object getType() {
		// TODO Auto-generated method stub
		return null;
	}
	public void setChildren(List<SchemaElement> children2) {
		// TODO Auto-generated method stub
		
	}
	public void setName(String value) {
		// TODO Auto-generated method stub
		
	}
	public void setType(String value) {
		// TODO Auto-generated method stub
		
	}
	public void setAttributes(Object attributes2) {
		// TODO Auto-generated method stub
		
	}
	public String getName() {
		// TODO Auto-generated method stub
		return null;
	}
	public Map<String, String> getAttributes() {
		// TODO Auto-generated method stub
		return null;
	}
	public List<SchemaElement> getChildren() {
		// TODO Auto-generated method stub
		return null;
	}
    
    // getters and setters
}

class SchemaComplexType {
    
    private String name;
    private List<SchemaElement> children;
    private Map<String, String> attributes = new HashMap<>();
	public List<SchemaElement> getChildren() {
		// TODO Auto-generated method stub
		return null;
	}
	public Object getAttributes() {
		// TODO Auto-generated method stub
		return null;
	}
	public String getName() {
		// TODO Auto-generated method stub
		return null;
	}
	public void setChildren(List<SchemaElement> currentSequence) {
		// TODO Auto-generated method stub
		
	}
	public void setName(String value) {
		// TODO Auto-generated method stub
		
	}
	public void addAttribute(String value, String value2) {
		// TODO Auto-generated method stub
		
	}
    
    // getters and setters + addAttribute
}

class SchemaSaxHandler extends DefaultHandler {

    // temporary - always null when tag closes
    private String currentSimpleTypeName;
    private String currentSimpleTypeBaseType;
    private SchemaElement currentElement;
    private SchemaComplexType currentComplexType;
    private List<SchemaElement> currentSequence;

    // cumulative - will use the data when XML finishes
    private Map<String, String> simpleTypes = new HashMap<>();
    private Map<String, SchemaComplexType> complexTypes = new HashMap<>();
    private SchemaElement rootElement;

    @Override
    public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {

        if (qName.equals("xs:simpleType")) {
            currentSimpleTypeName = atts.getValue("name");
        }
        if (qName.equals("xs:restriction")) {
            currentSimpleTypeBaseType = atts.getValue("base");
        }

		
        if (qName.equals("xs:complexType")) {
            currentComplexType = new SchemaComplexType();
            currentComplexType.setName(atts.getValue("name"));
        }


        if (qName.equals("xs:sequence")) {
            currentSequence = new ArrayList<>();
        }

		
		  if (qName.equals("xs:element")) { currentElement = new SchemaElement();
		  currentElement.setName(atts.getValue("name"));
		  currentElement.setType(atts.getValue("type")); if (currentSequence != null) {
		  currentSequence.add(currentElement); } else { rootElement = currentElement; }
		  }
		 

		
		  if (qName.equals("xs:attribute")) {
		  currentComplexType.addAttribute(atts.getValue("name"),
		  atts.getValue("type")); }
		 
    }

    public String getCurrentSimpleTypeName() {
		return currentSimpleTypeName;
	}

	public void setCurrentSimpleTypeName(String currentSimpleTypeName) {
		this.currentSimpleTypeName = currentSimpleTypeName;
	}

	public String getCurrentSimpleTypeBaseType() {
		return currentSimpleTypeBaseType;
	}

	public void setCurrentSimpleTypeBaseType(String currentSimpleTypeBaseType) {
		this.currentSimpleTypeBaseType = currentSimpleTypeBaseType;
	}

	public SchemaElement getCurrentElement() {
		return currentElement;
	}

	public void setCurrentElement(SchemaElement currentElement) {
		this.currentElement = currentElement;
	}

	public SchemaComplexType getCurrentComplexType() {
		return currentComplexType;
	}

	public void setCurrentComplexType(SchemaComplexType currentComplexType) {
		this.currentComplexType = currentComplexType;
	}

	public List<SchemaElement> getCurrentSequence() {
		return currentSequence;
	}

	public void setCurrentSequence(List<SchemaElement> currentSequence) {
		this.currentSequence = currentSequence;
	}

	public Map<String, String> getSimpleTypes() {
		return simpleTypes;
	}

	public void setSimpleTypes(Map<String, String> simpleTypes) {
		this.simpleTypes = simpleTypes;
	}

	public Map<String, SchemaComplexType> getComplexTypes() {
		return complexTypes;
	}

	public void setComplexTypes(Map<String, SchemaComplexType> complexTypes) {
		this.complexTypes = complexTypes;
	}

	public SchemaElement getRootElement() {
		return rootElement;
	}

	public void setRootElement(SchemaElement rootElement) {
		this.rootElement = rootElement;
	}

	@Override
    public void endElement(String uri, String localName, String qName) throws SAXException {
        if (qName.equals("xs:simpleType")) {
            simpleTypes.put(currentSimpleTypeName, currentSimpleTypeBaseType);
            currentSimpleTypeName = null;
            currentSimpleTypeBaseType = null;
        }
		
		  if (qName.equals("xs:complexType")) {
		  complexTypes.put(currentComplexType.getName(), currentComplexType);
		  currentComplexType = null; }
		 
		
		  if (qName.equals("xs:sequence")) { if (currentComplexType != null) {
		  currentComplexType.setChildren(currentSequence); }
		 
            currentSequence = null;
        }
   }

    @Override
    public void endDocument() throws SAXException {
        makeTree(rootElement);
        printTree(rootElement, "");
    }

    public void makeTree(SchemaElement element) {
        SchemaComplexType type = complexTypes.get(element.getType());
        if (type != null) {
            List<SchemaElement> children = type.getChildren();
            element.setChildren(children);
            for (SchemaElement child : children) {
                makeTree(child);
            }
            element.setAttributes(type.getAttributes());
        } else {
            element.setType(simpleTypes.get(element.getType()));
        }
    }

    private void printTree(SchemaElement element, String indent) {
        System.out.println(indent + element.getName() + " : " + element.getType());
        Map<String, String> attributes = element.getAttributes();
        if (attributes != null) {
            for (Map.Entry<String, String> entry : attributes.entrySet()) {
                System.out.println("    @" + entry.getKey() + " : " + simpleTypes.get(entry.getValue()));
            }
        }
        List<SchemaElement> children = element.getChildren();
        if (children != null) {
            for (SchemaElement child : children) {
                printTree(child, indent + "    ");
            }
        }
    }

}
